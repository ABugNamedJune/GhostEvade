	Ghost Evade
	written by June Bush
	June@JuneBush.com
	v8/4 9/25/23
	this is released under a CC BY 4.0 license.
	You're free to do whatever you want with this software and share it with anyone, just please keep my name and email attached.
	Thx!

set initial and static values
//start POS0 return POS0
//THIS IS WORKING DO NOT EVER FUCK WITH THESE VALUES

	########## ########## 	########## ##########

	//sub set carriage returns
	//start POS0 return POS0
	-			set POS0 255
	>>>>>>>>>> >>>>>>>>>>	mov POS30
	>>>>>>>>>>
	-			set POS30 255
	>>>>>>>>>>		mov POS40
	-			set POS40 255
	>>>>>>>>>> >>>>>>>>>	mov POS59
	-			set POS59 255
	>>>>>>>>>> >>>>>>>>>>	mov POS89
	>>>>>>>>>>		
	-			set POS89 255
	>>>>>>>>>> >>>>>>>>>>	mov POS149
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	-			set POS149 255
	>>>>>>>>>> >>>>>>>>>>	mov POS259
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>

	>>>>>>>>>>
	-			set POS259 255
	>>>>>>>>>> >>>>>>>>>>	mov POS369
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>

	>>>>>>>>>>
	-			set POS369 255
	<<<<<<<<<< <<<<<<<<<<	ret POS0
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<	POS269

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<	POS169

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<	POS69 (nice)

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<		POS0
	//return sub POS0

	########## ########## 	########## ##########

	//sub set initial player position
	//start POS0 return POS0
	>>>>>>>>>>		mov POS10
	++			set POS10 2
	>>>>>			mov POS15
	++			set POS15 2
	<<<<<<<<<< <<<<<	ret POS0
	//return sub POS0

	//sub set initial ai position
	//start POS0 return POS0
	>>>>>>>>>> >>>>>>>>>>	mov POS41
	>>>>>>>>>> >>>>>>>>>>
	>
	++++++++		set POS41 8
	>>>>			mov POS45
	++++++++		set POS45 8
	<<<<<<<<<< <<<<<<<<<<	ret POS0
	<<<<<<<<<< <<<<<<<<<<
	<<<<<			POS0
	//return sub POS0

//return POS0

start game loop
//Start POS0 return POS0
//validated bug free lol
	>			mov POS1
	+			inc POS1
	[			beg loop
	<			ret POS0
//return POS0

build layers in video memory
//start POS0 return POS0

	########## ########## 	########## ##########

	//sub build collision objects
	//start POS0 return POS0
	//this code is working 9/22/23
	>>>>>>>>>> >>>>>>>>>>	mov POS90
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>>
	+			set POS90 1
	>			mov POS91
	++			set POS91 2
	>			mov POS92
	+++			set POS92 3
	>			mov POS93
	++++			set POS93 4
	>			mov POS94
	+++++			set POS94 5
	>			mov POS95
	++++++			set POS95 6
	>			mov POS96
	+++++++			set POS96 7
	>			mov POS97
	++++++++		set POS97 8
	>			mov POS98
	+++++++++		set POS98 9
	>			mov POS99
	++++++++++		set POS99 10
	>			mov POS100
	++++++++++ ++++++++++	I know there is definitely
	++++++++++ ++++++++++	a better way to do this
	++++++++++ ++++++++++	but this is easy
	++++++++++ ++++++++++
	++++++++++ +
	>			mov POS101
	++++++++++ ++++++++++	set POS101 92
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++++++++ ++
	>			mov POS102
	++++++++++ ++++++++++	set POS102 93
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++++++++ +++
	>			mov POS103
	++++++++++ ++++++++++	set POS103 94
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++++++++ ++++
	>			mov POS104
	++++++++++ ++++++++++	set POS104 95
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++++++++ +++++
	>			mov POS105
	++++++++++ ++++++++++	set POS105 96
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++++++++ ++++++
	>			mov POS106
	++++++++++ ++++++++++	set POS106 97
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++++++++ +++++++
	>			mov POS107
	++++++++++ ++++++++++	set POS107 98
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++++++++ ++++++++
	>			mov POS108
	++++++++++ ++++++++++	set POS108 99
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++++++++ +++++++++
	>			mov POS109
	++++++++++ ++++++++++	set POS109 100
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	>			mov POS110
	++++++++++ +		set POS110 11
	>			mov POS111
	++++++++++ ++++++	set POS111 16
	>			mov POS112
	++++++++++ ++++++++++	set POS112 20
	>			mov POS113
	++++++++++ ++++++++++	set POS113 21
	+
	>			mov POS114
	++++++++++ ++++++++++	set POS114 26
	++++++
	>			movPOS115
	++++++++++ ++++++++++	set POS115 30
	++++++++++
	>			mov POS116
	++++++++++ ++++++++++	set POS116 31
	++++++++++ +
	>			mov POS117
	++++++++++ ++++++++++	set POS117 36
	++++++++++ ++++++
	>			mov POS118
	++++++++++ ++++++++++	set POS118 40
	++++++++++ ++++++++++
	>			mov POS119
	++++++++++ ++++++++++	set POS119 41
	++++++++++ ++++++++++
	+
	>			mov POS120
	++++++++++ ++++++++++	set POS120 46
	++++++++++ ++++++++++
	++++++
	>			mov POS121
	++++++++++ ++++++++++	set POS121 47
	++++++++++ ++++++++++
	+++++++
	>			mov POS122
	++++++++++ ++++++++++	set POS122 48
	++++++++++ ++++++++++
	++++++++
	>			mov POS123
	++++++++++ ++++++++++	set POS123 50
	++++++++++ ++++++++++
	++++++++++
	>			mov POS124
	++++++++++ ++++++++++	set POS124 51
	++++++++++ ++++++++++	fuuuuuck this is tedious
	++++++++++ +		
	>			mov POS125
	++++++++++ ++++++++++	set POS125 57
	++++++++++ ++++++++++
	++++++++++ +++++++	
	>			mov POS126
	++++++++++ ++++++++++	set POS126 60
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	>			mov POS127
	++++++++++ ++++++++++	set POS127 61
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	+
	>			mov POS128
	++++++++++ ++++++++++	set POS128 67
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	+++++++
	>			mov POS129
	++++++++++ ++++++++++	set POS129 70
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++++++++
	>			mov POS130
	++++++++++ ++++++++++	set POS130 71
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++++++++ +
	>			mov POS131
	++++++++++ ++++++++++	set POS131 77
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++++++++ +++++++
	>			mov POS132
	++++++++++ ++++++++++	set POS132 80
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	>			mov POS133
	++++++++++ ++++++++++	set POS133 81
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	+
	>			mov POS134
	++++++++++ ++++++++++	set POS134 90
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++++++++
	>			mov POS135
	++++++++++ ++++++++++	set POS135 84
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++
	>			mov POS136
	++++++++++ ++++++++++	set POS136 74
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++++++++ ++++
	>			mov POS137
	++++++++++ ++++++++++	set POS137 64
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++

	<<<<<<<<<< <<<<<<<<<<	mov POS0
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<
	//return POS0

	########## ########## 	########## ##########

	//sub build player map in video memory
	//start POS 0 return POS0
	//player memory map exists starting in memory position 150
	//and is composed of incrementing values (n plus 1)
	//this code is working 9/22/23
	
	//navigate to POS150 hoo boy this is gonna suck
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>	100

	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>>

	//progressively increment values
	//as the pointer moves through this I could have used the subsequent memory position
	//as a math operator to make this look cleaner but frankly I think that is uneccesary
	//this may be inefficient and messy but it is far more readable and after writing seven
	//fucking previous versions of this I will take readable over fancy
1	+>			
2	++>
3	+++>
4	++++>
5	+++++>
6	++++++>
7	+++++++>
8	++++++++>
9	+++++++++>
10	++++++++++ >		POS160

11	++++++++++ +>			
2	++++++++++ ++>
3	++++++++++ +++>
4	++++++++++ ++++>
5	++++++++++ +++++>
6	++++++++++ ++++++>
7	++++++++++ +++++++>
8	++++++++++ ++++++++>
9	++++++++++ +++++++++>
20	++++++++++ ++++++++++ >		POS170

21	++++++++++ ++++++++++ +>			
2	++++++++++ ++++++++++ ++>
3	++++++++++ ++++++++++ +++>
4	++++++++++ ++++++++++ ++++>
5	++++++++++ ++++++++++ +++++>
6	++++++++++ ++++++++++ ++++++>
7	++++++++++ ++++++++++ +++++++>
8	++++++++++ ++++++++++ ++++++++>
9	++++++++++ ++++++++++ +++++++++>
30	++++++++++ ++++++++++ ++++++++++ >	POS180

31	++++++++++ ++++++++++ ++++++++++ +>			
2	++++++++++ ++++++++++ ++++++++++ ++>
3	++++++++++ ++++++++++ ++++++++++ +++>
4	++++++++++ ++++++++++ ++++++++++ ++++>
5	++++++++++ ++++++++++ ++++++++++ +++++>
6	++++++++++ ++++++++++ ++++++++++ ++++++>
7	++++++++++ ++++++++++ ++++++++++ +++++++>
8	++++++++++ ++++++++++ ++++++++++ ++++++++>
9	++++++++++ ++++++++++ ++++++++++ +++++++++>
40	++++++++++ ++++++++++ ++++++++++ ++++++++++ >	POS190

41	++++++++++ ++++++++++ ++++++++++ ++++++++++ +>			
2	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++>
3	++++++++++ ++++++++++ ++++++++++ ++++++++++ +++>
4	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++>
5	++++++++++ ++++++++++ ++++++++++ ++++++++++ +++++>
6	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++>
7	++++++++++ ++++++++++ ++++++++++ ++++++++++ +++++++>
8	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++>
9	++++++++++ ++++++++++ ++++++++++ ++++++++++ +++++++++>
50	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++ >	POS200

	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
51	+>			
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
2	++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
3	+++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
4	++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
5	+++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
6	++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
7	+++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
8	++++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
9	+++++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
60	++++++++++ >							POS210

	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
11	++++++++++ +>			
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
2	++++++++++ ++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
3	++++++++++ +++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
4	++++++++++ ++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
5	++++++++++ +++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
6	++++++++++ ++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
7	++++++++++ +++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
8	++++++++++ ++++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
9	++++++++++ +++++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
20	++++++++++ ++++++++++ >						POS220

	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
21	++++++++++ ++++++++++ +>			
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
2	++++++++++ ++++++++++ ++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
3	++++++++++ ++++++++++ +++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
4	++++++++++ ++++++++++ ++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
5	++++++++++ ++++++++++ +++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
6	++++++++++ ++++++++++ ++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
7	++++++++++ ++++++++++ +++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
8	++++++++++ ++++++++++ ++++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
9	++++++++++ ++++++++++ +++++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
30	++++++++++ ++++++++++ ++++++++++ >				POS230

	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
31	++++++++++ ++++++++++ ++++++++++ +>			
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
2	++++++++++ ++++++++++ ++++++++++ ++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
3	++++++++++ ++++++++++ ++++++++++ +++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
4	++++++++++ ++++++++++ ++++++++++ ++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
5	++++++++++ ++++++++++ ++++++++++ +++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
6	++++++++++ ++++++++++ ++++++++++ ++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
7	++++++++++ ++++++++++ ++++++++++ +++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
8	++++++++++ ++++++++++ ++++++++++ ++++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
9	++++++++++ ++++++++++ ++++++++++ +++++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
40	++++++++++ ++++++++++ ++++++++++ ++++++++++ >			POS240

	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
41	++++++++++ ++++++++++ ++++++++++ ++++++++++ +>		
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++	
2	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
3	++++++++++ ++++++++++ ++++++++++ ++++++++++ +++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
4	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
5	++++++++++ ++++++++++ ++++++++++ ++++++++++ +++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
6	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
7	++++++++++ ++++++++++ ++++++++++ ++++++++++ +++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
8	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
9	++++++++++ ++++++++++ ++++++++++ ++++++++++ +++++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
50	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++ >	POS250

	//return to POS0
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<<

	//return POS0

	########## ########## 	########## ##########

	//sub build ai map
	//start POS0 return POS0
	//this is functionally the same as the player map but in a different location
	//this code works 9/22/23

	//move pointer to POS370
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>

	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>

	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>

	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>>

1	+>			
2	++>
3	+++>
4	++++>
5	+++++>
6	++++++>
7	+++++++>
8	++++++++>
9	+++++++++>
10	++++++++++ >		POS380

11	++++++++++ +>			
2	++++++++++ ++>
3	++++++++++ +++>
4	++++++++++ ++++>
5	++++++++++ +++++>
6	++++++++++ ++++++>
7	++++++++++ +++++++>
8	++++++++++ ++++++++>
9	++++++++++ +++++++++>
20	++++++++++ ++++++++++ >		POS390

21	++++++++++ ++++++++++ +>			
2	++++++++++ ++++++++++ ++>
3	++++++++++ ++++++++++ +++>
4	++++++++++ ++++++++++ ++++>
5	++++++++++ ++++++++++ +++++>
6	++++++++++ ++++++++++ ++++++>
7	++++++++++ ++++++++++ +++++++>
8	++++++++++ ++++++++++ ++++++++>
9	++++++++++ ++++++++++ +++++++++>
30	++++++++++ ++++++++++ ++++++++++ >	POS400

31	++++++++++ ++++++++++ ++++++++++ +>			
2	++++++++++ ++++++++++ ++++++++++ ++>
3	++++++++++ ++++++++++ ++++++++++ +++>
4	++++++++++ ++++++++++ ++++++++++ ++++>
5	++++++++++ ++++++++++ ++++++++++ +++++>
6	++++++++++ ++++++++++ ++++++++++ ++++++>
7	++++++++++ ++++++++++ ++++++++++ +++++++>
8	++++++++++ ++++++++++ ++++++++++ ++++++++>
9	++++++++++ ++++++++++ ++++++++++ +++++++++>
40	++++++++++ ++++++++++ ++++++++++ ++++++++++ >	POS410

41	++++++++++ ++++++++++ ++++++++++ ++++++++++ +>			
2	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++>
3	++++++++++ ++++++++++ ++++++++++ ++++++++++ +++>
4	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++>
5	++++++++++ ++++++++++ ++++++++++ ++++++++++ +++++>
6	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++>
7	++++++++++ ++++++++++ ++++++++++ ++++++++++ +++++++>
8	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++>
9	++++++++++ ++++++++++ ++++++++++ ++++++++++ +++++++++>
50	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++ >	POS420 nice

	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
51	+>			
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
2	++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
3	+++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
4	++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
5	+++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
6	++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
7	+++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
8	++++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
9	+++++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
60	++++++++++ >							POS430

	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
11	++++++++++ +>			
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
2	++++++++++ ++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
3	++++++++++ +++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
4	++++++++++ ++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
5	++++++++++ +++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
6	++++++++++ ++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
7	++++++++++ +++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
8	++++++++++ ++++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
9	++++++++++ +++++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
20	++++++++++ ++++++++++ >						POS440

	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
21	++++++++++ ++++++++++ +>			
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
2	++++++++++ ++++++++++ ++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
3	++++++++++ ++++++++++ +++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
4	++++++++++ ++++++++++ ++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
5	++++++++++ ++++++++++ +++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
6	++++++++++ ++++++++++ ++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
7	++++++++++ ++++++++++ +++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
8	++++++++++ ++++++++++ ++++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
9	++++++++++ ++++++++++ +++++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
30	++++++++++ ++++++++++ ++++++++++ >				POS450

	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
31	++++++++++ ++++++++++ ++++++++++ +>			
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
2	++++++++++ ++++++++++ ++++++++++ ++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
3	++++++++++ ++++++++++ ++++++++++ +++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
4	++++++++++ ++++++++++ ++++++++++ ++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
5	++++++++++ ++++++++++ ++++++++++ +++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
6	++++++++++ ++++++++++ ++++++++++ ++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
7	++++++++++ ++++++++++ ++++++++++ +++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
8	++++++++++ ++++++++++ ++++++++++ ++++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
9	++++++++++ ++++++++++ ++++++++++ +++++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
40	++++++++++ ++++++++++ ++++++++++ ++++++++++ >			POS460

	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
41	++++++++++ ++++++++++ ++++++++++ ++++++++++ +>		
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++	
2	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
3	++++++++++ ++++++++++ ++++++++++ ++++++++++ +++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
4	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
5	++++++++++ ++++++++++ ++++++++++ ++++++++++ +++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
6	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
7	++++++++++ ++++++++++ ++++++++++ ++++++++++ +++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
8	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
9	++++++++++ ++++++++++ ++++++++++ ++++++++++ +++++++++>
	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++
50	++++++++++ ++++++++++ ++++++++++ ++++++++++ ++++++++++ >	POS470

	//season 1 episode 10 move along home
	<<<<<<<<<< <<<<<<<<<<		Allamaraine count to twenty
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<		Allamaraine then eighty more

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<

	<<<<<<<<<< <<<<<<<<<<		Holy shit that episode was nominated for an Emmy??????
	<<<<<<<<<< <<<<<<<<<<		why?
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<		Allamaraine if you can see

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<<			Allamaraine you should be at zero

	//return POS0

	########## ########## 	########## ##########

	//sub build collision graphics map
	//start POS0 return POS0
	
	//move to memory position 260
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>

	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>

	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>

	//note these values are fucked redo them
	row 1
	+++			mov POS260 set 3
	>+++			mov POS261 set 3
	>+++			mov POS262 set 3
	>+++			mov POS263 set 3
	>+++			mov POS264 set 3
	>+++			mov POS265 set 3
	>+++			mov POS266 set 3
	>+++			mov POS267 set 3
	>+++			mov POS268 set 3
	>+++			mov POS269 set 3

	row 2
	>+++			mov POS270 set 3
	>>>>>+++		mov POS275 set 3
	>>>>+++			mov POS279 set 3

	row 3
	>+++			mov POS280 set 3
	>>>>>+++		mov POS285 set 3
	>>>>+++			mov POS289 set 3

	row 4
	>+++			mov POS290 set 3
	>>>>>+++		mov POS295 set 3
	>>>>+++			mov POS299 set 3

	row 5
	>+++			mov POS300 set 3
	>>>>>+++		mov POS305 set 3
	>+++			mov POS306 set 3
	>+++			mov POS307 set 3
	>>+++			mov POS309 set 3

	row 6
	>+++			mov POS310 set 3
	>>>>>>+++		mov POS316 set 3
	>>>+++			mov POS319 set 3
	>+++			mov POS320 set 3
	>>>+++			mov POS323 set 3
	>>>+++			mov POS326 set 3
	>>>+++			mov POS329 set 3
	>+++			mov POS330 set 3
	>>>+++			mov POS333 set 3
	>>>+++			mov POS336 set 3
	>>>+++			mov POS339 set 3
	>+++			mov POS340 set 3
	>>>+++			mov POS343 set 3 o shit its the halo guys
	>>>>>>+++		mov POS349 set 3
	>+++			mov POS350 set 3
	>+++			mov POS351 set 3
	>+++			mov POS352 set 3
	>+++			mov POS353 set 3
	>+++			mov POS354 set 3
	>+++			mov POS355 set 3
	>+++			mov POS356 set 3
	>+++			mov POS357 set 3
	>+++			mov POS358 set 3
	>+++			mov POS359 set 3
	>			mov POS360 (just to be an easy number)

	//return to zero
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<

	//return POS0
//return POS0

set comparator values
//this sets up stuff like the ascii comparators
//the player x y and initial absolute positions
//and the ai x y and initial absolute positions
//start POS0 return POS0

	########## ########## 	########## ##########

	//sub build ascii comparators
	//start POS0 return POS0
	>>>>>>>>>> >>>>>>>>>>	mov POS31 (I am using the input bit as a math operator)
	>>>>>>>>>> >
	
	ascii a
	++++++++++		set POS31 10
	[-			sta loop dec
	>			mov POS32 (ascii a)
	++++++++++		inc POS31 10
	<]			ret eval loop
	>---<			dec POS31 3
	final value should be 97

	ascii s
	++++++++++ +		set POS31 11
	[-			sta loop dec
	>>			mov POS33 (ascii s)
	++++++++++		inc POS33 10
	<<]			ret eval
	>>+++++<<		inc POS31 5
	final value should be 115

	ascii d
	++++++++++		set POS31 10
	[-			sta loop dec
	>>>			mov POS34 (ascii d)
	++++++++++		inc POS34 10
	<<<]			ret eval
	final value should be 100

	ascii w
	++++++++++ ++		set POS31 12
	[-			sta loop dec
	>>>>			mov POS35 (ascii w)
	++++++++++		inc POS35 10
	<<<<]			ret eval
	>>>>-<<<<		dec POS35 1
	final value should be 119

	<<<<<<<<<< <<<<<<<<<<	mov POS0
	<<<<<<<<<< <

	//return POS0

	########## ########## 	########## ##########

	//sub duplicate x values
	//start POS0 return POS0
	//this code works 9/23/23
	>>>>>>>>>>		mov POS10
	[-			sta loop  dec
	>+>+>+>+		inc POS11 POS12 POS13 POS14
	<<<<			ret POS10
	]			eva loop
	>>>>			mov POS14
	[-			sta loop  dec
	<<<<+			inc POS10
	>>>>]			ret eval
	<<<<<<<<<< <<<<		ret POS0
	//return POS0

	########## ########## 	########## ##########

	sub duplicate y values
	//start POS0 return POS0
	//this code works 9/22/23
	>>>>>>>>>> >>>>>	mov POS15
	[-			sta loop  dec
	>+>+>+>+		inc POS11 POS12 POS13 POS14
	<<<<			ret POS10
	]			eva loop
	>>>>			mov POS14
	[-			sta loop  dec
	<<<<+			inc POS10
	>>>>]			ret eval
	<<<<<<<<<< <<<<<<<<<	ret POS0
	//return POS0

	########## ########## 	########## ##########

	sub set initial player absolute position
	//start POS0 return POS0
	//copy the x position into the current absolute position memory address
	//this code works 9/23/23
	>>>>>>>>>> >		mov POS11
	[-			sta loop dec
	>>>>>>>>>> >>>>		mov POS25
	+			inc POS25
	<<<<<<<<<< <<<<		ret POS11
	]			eva loop
	
	//copy the y position * 10 into the initial abs pos mem addr
	>>>>>			mov POS16
	[-			sta loop dec
	>>>>>>>>>		mov POS25
	++++++++++		inc POS25 10
	<<<<<<<<<		mov POS16
	]			eva loop
	
	<<<<<<<<<< <<<<<<	mov POS0

	########## ########## 	########## ##########

	sub duplicate ai x values
	//start POS0 return POS0
	>>>>>>>>>> >>>>>>>>>>	mov POS41
	>>>>>>>>>> >>>>>>>>>>
	>
	[-			sta loop dec
	>+>+>+			inc POS42 43 44
	<<<			mov POS41
	]			eva loop
	//reset
	>>>			mov POS44
	[-			sta loop dec
	<<<			mov POS41
	+			inc POS41
	>>>			mov POS44
	]			eva loop
	<<<<<<<<<< <<<<<<<<<<	mov POS0
	<<<<<<<<<< <<<<<<<<<<
	<<<<
	//return POS0

	########## ########## 	########## ##########

	sub duplicate ai y values
	//start POS0 return POS0
	// I know I know it's excessive as hell to redundantly move the pointer back and forth
	//but I swear for the sake of writing usable brainfuck this is *necessary*
	>>>>>>>>>> >>>>>>>>>>	mov POS45
	>>>>>>>>>> >>>>>>>>>>
	>>>>>
	[-			sta loop dec
	>+>+>+			inc POS46 47 48
	<<<			mov POS45
	]			eva loop
	//reset
	>>>			mov POS48
	[-			sta loop dec
	<<<			mov POS45
	+			inc POS45
	>>>			mov POS48
	]			eva loop
	<<<<<<<<<< <<<<<<<<<<	mov POS0
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<
	//return POS0

	########## ########## 	########## ##########

	sub calculate initial ai abs pos
	//start POS0 return POS0
	>>>>>>>>>> >>>>>>>>>>	mov POS43
	>>>>>>>>>> >>>>>>>>>>
	>>>
	[-			sta loop dec
	>>>>>>>			mov POS50
	+			inc POS50
	>+<			inc POS51
	<<<<<<<			mov POS43
	]			eva loop
	//yposition
	>>>>			mov POS47
	[-			sta loop dec
	>>>			mov POS50
	++++++++++		inc POS50 10
	>
	++++++++++
	<
	<<<			mov POS50
	]			eva loop
	<<<<<<<<<< <<<<<<<<<<	mov POS0
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<
	//return POS0
//return POS0

plot graphics on layers
//start POS0 return POS0
//this scrolls through the layers and assigns the appropriate values
//in the correct spaces this is not responsible for printing the map

	########## ########## 	########## ##########

	sub plot player position
	//start POS0 return POS0
	//this code returns 0 but it is not fully working probably an issue with the x and y positions
	//or maybe i just made a gaff in my internal calculations
	//for now it is fine and if you are reading this in the final release then I guess I figured
	//it wasnt a big enough issue to fix
	>>>>>>>>>> >>>>>>>>>>	mov POS25
	>>>>>
	[			sta loop dec
	>>>>>>>>>> >>>>>>>>>>	mov POS50
	>>>>>
	>>>>>>>>>> >>>>>>>>>>	mov POS150
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>

	->->->->-> ->->->->->	dec every position in the player map
	->->->->-> ->->->->->
	->->->->-> ->->->->->
	->->->->-> ->->->->->
	->->->->-> ->->->->->

	->->->->-> ->->->->->
	->->->->-> ->->->->->
	->->->->-> ->->->->->
	->->->->-> ->->->->->
	->->->->-> ->->->->->	if everything went okay the pointer should be at POS250
	
	<<<<<<<<<< <<<<<<<<<<	mov POS25
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<	pos150

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<	pos 50

	<<<<<<<<<< <<<<<<<<<<
	<<<<<			pos25
	-]			eva loop
	<<<<<<<<<< <<<<<<<<<<	mov POS0
	<<<<<			
	//return POS0

	########## ########## 	########## ##########

	sub plot ai position
	//start POS0 return POS0
	//this suffers from the same bug as the player position but in a different way
	//wish me luck on getting tracking working with this
	>>>>>>>>>> >>>>>>>>>>	mov POS50
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>>
	[			sta loop
	>>>>>>>>>> >>>>>>>>>>	mov POS70
	
	>>>>>>>>>> >>>>>>>>>>	mov POS370
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>	POS170

	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>	POS270

	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>	POS370

	->->->->-> ->->->->->	dec every position in the ai map
	->->->->-> ->->->->->
	->->->->-> ->->->->->
	->->->->-> ->->->->->
	->->->->-> ->->->->->

	->->->->-> ->->->->->
	->->->->-> ->->->->->
	->->->->-> ->->->->->
	->->->->-> ->->->->->
	->->->->-> ->->->->->

	<<<<<<<<<< <<<<<<<<<<	mov POS450

	<<<<<<<<<< <<<<<<<<<<	mov POS50
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<	POS350

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<	POS250

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<	POS150

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<	POS50

	-]			dec eval loop
	<<<<<<<<<< <<<<<<<<<<	mov POS0
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<<
	
	//return POS0
//return POS0

process layers
//start POS0 return POS0
//this turns the player and ai maps into the correct symbols to be drawn
//the ai position needs to be turned into the value 1 because ascii space plus one equals !
//the player position needs to be turned into the value 64 because that is @
//and spaces need to be set to 32

	########## ########## 	########## ##########

	sub set player layer
	//start POS0 return POS0
	
	>>>>>>>>>> >>>>>>>>>>	mov POS150
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>

	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>>
	
	[[-]			start seeker and clear position
	++++++++++ ++++++++++	after position is cleared set value to 32
	++++++++++ ++
	>]			advance until player position
	
	++++++++++ ++++++++++	set player position to 64
	++++++++++ ++++++++++
	++++++++++ ++++++++++
	++++>

	[[-]			start seeker and clear position
	++++++++++ ++++++++++	after position is cleared set value to 32
	++++++++++ ++
	>]			advance until end should be POS250

	<<<<<<<<<< <<<<<<<<<<	mov POS0
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<<
	//return POS0	

	########## ########## 	########## ##########

	sub set ai layer
	//start POS0 return POS0
	
	>>>>>>>>>> >>>>>>>>>>	mov POS370
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>	POS100

	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>	POS200

	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>	POS300

	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>>		POS370

	[[-]			start seeker and clear position
	>]			advance until ai position
	
	+>			set AI pos to 1

	[[-]			start seeker and clear position
	>]			advance until end should be POS470

	<<<<<<<<<< <<<<<<<<<<	mov POS0
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<<		POS400

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<	POS300

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<	POS200

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<	POS100

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<	POS0 (hopefully)
	//return POS0
//return POS0

collate maps
//start POS0 return POS0
//this merges all of the layers onto the player layer
//this is gonna fucking suck
//at least this has the benefit of doing some of the cleanup so we don't have to do it later

	########## ##########	########## ##########

	set collision layer
	>>>>>>>>>> >>>>>>>>>>	mov POS359
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>	POS100

	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>	POS200

	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>	POS300

	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>	POS359

	//god damn what is the best way to do this
	//I think I can use a seeker? lets try it
	// you know what? the carriage returns are set to the beginnings of the maps
	//so lets do this in reverse
	+[-[			casually pinching Mitxela's seeker
				this moves the value in the current cell 110 memory positions back
	
	<<<<<<<<<< <<<<<<<<<<	mov POSX minus 110
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<<

	+			inc current pos

	>>>>>>>>>> >>>>>>>>>>	mov POSX plus 110
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>>
	-]

	<
	+]-			end seeker
				god damn that actually worked wtf
	//pointer should be at POS259
	<<<<<<<<<		mov POS250
	<<<<<<<<<< <<<<<<<<<<	mov POS200
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<<

	<<<<<<<<<< <<<<<<<<<<	mov POS100
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<

	<<<<<<<<<< <<<<<<<<<<	mov POS0
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	//return POS0

	########## ##########	########## ##########

	set ai layer
	//start POS0 return POS0
	//this is going to be a little glitchy when going over walls
	//but whatever it's brainfuck
	//it's fine
	
	>>>>>>>>>> >>>>>>>>>>	mov POS469
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>	POS100

	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>	POS200

	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>	POS300

	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>	POS400

	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>		POS469

	+[-[			back at it with the Mitxela seeker
	
	<<<<<<<<<< <<<<<<<<<<	mov POSX minus 220
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<

	<<<<<<<<<< <<<<<<<<<<

	+			inc current pos

	>>>>>>>>>> >>>>>>>>>>	mov POSX plus 110
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>

	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>

	>>>>>>>>>> >>>>>>>>>>
	-]

	<
	+]-			end seeker

	//return to zero i think the pointer should be at POS149 I really hope its there
	//update the pointer was not at POS149 it is actually at POS369 because of course it is
	<<<<<<<<<		mov POS360

	<<<<<<<<<< <<<<<<<<<<	mov POS300
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	
	<<<<<<<<<< <<<<<<<<<<	mov POS0
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<	POS200

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<	POS100

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<	POS0	
	//return POS0
//return POS0

print map
//start POS0 return POS0

	>>>>>>>>>> >>>>>>>>>>	mov POS150
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>>		POS50

	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>	POS150

	//ughhhh fuck I forgot to reserve a new line characterFUCKFASfjdADJSAKFJ
	//god damn
 how do I do this?
	//this is gonna be messy
	.>.>.>.>.> .>.>.>.>.>	print first row
	
	>>>>>>>>>> >>>>>>>>>>	mov POS250
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>>	
	++++++++++		set POS250 10
	.			print new line
	<<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	
	.>.>.>.>.> .>.>.>.>.>	print
	
	>>>>>>>>>> >>>>>>>>>>	mov POS250
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	.			print new line
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<

	.>.>.>.>.> .>.>.>.>.>	print
	
	>>>>>>>>>> >>>>>>>>>>	mov POS250
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>>
	.			print new line
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<<

	.>.>.>.>.> .>.>.>.>.>	print
	
	>>>>>>>>>> >>>>>>>>>>	mov POS250
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	.			print new line
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<

	.>.>.>.>.> .>.>.>.>.>	print
	
	>>>>>>>>>> >>>>>>>>>>	mov POS250
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>>
	.			print new line
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<<

	.>.>.>.>.> .>.>.>.>.>	print
	
	>>>>>>>>>> >>>>>>>>>>	mov POS250
	>>>>>>>>>> >>>>>>>>>>
	.			print new line
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	
	.>.>.>.>.> .>.>.>.>.>	print
	
	>>>>>>>>>> >>>>>>>>>>	mov POS250
	>>>>>>>>>>
	.			print new line
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<<

	.>.>.>.>.> .>.>.>.>.>	print
	
	>>>>>>>>>> >>>>>>>>>>	mov POS250
	.			print new line
	<<<<<<<<<< <<<<<<<<<<

	.>.>.>.>.> .>.>.>.>.>	print
	
	>>>>>>>>>>		mov POS250
	.			print new line
	<<<<<<<<<<

	.>.>.>.>.> .>.>.>.>.>	print
	.			print new line
	----------		clear the new line character because I'm a dummy

	HOLY SHIT IT WORKS
	IT ACTUALLY WORKS WHAT THE FUCK
	I HAVE BEEN WORKING ON THIS FOR TWO FUCKING WEEKS AND IT FUCKING WORKS
	HOLY FUCK

	//return to zero
	//I think the pointer is at POS250?
	//we'll see
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<<

	woohoo it totally was
	//Return POS0
//return POS0


process character movement
//start POS0 return POS0

	########## #########	########## ##########
	
	//sub parse player input
	//takes a keypress and then sets a flag depending on which key was pressed

	>>>>>>>>>> >>>>>>>>>>	mov POS31
	>>>>>>>>>> >

	,			take input

	//begin parsing
	[-			beg loop dec
	>->->->-		dec comparators
	<<<<			ret
	]			eva loop
	>[>]			seek to first zero
	>>>>			seek to corresponding comparator
	+			set flag
	<<<<			return
	<[<]			return to input bit
	//comparator should now be theoretically set
	//I wish I had the interpreter I wrote to work with while writing this code at work
	//Mitxela's is fantastic but I can't read hexadecimal as quickly as I can read base ten :(

	//alter proposed x and y values
	>>>>>			move to first comparator bit
	[			if true decrement proposed x position
	<<<<<<<<<< <<<<<<<<<<
	<<<-<-
	>>>>>>>>>> >>>>>>>>>>	return to first flag
	>>>>
	-			clear flag
	]			end
	
	>			move to next flag
	[			while true
	<<<<<<<<<< <<<<<<<<<	move to proposed y position
	+<+			increment proposed y positions
	>>>>>>>>>> >>>>>>>>>>	return to second flag
	-			clear flag
	]			end

	>			move to next flag
	[			while true
	<<<<<<<<<< <<<<<<<<<<	move to proposed x positions
	<<<<<+<+		increment proposed x positions
	>>>>>>>>>> >>>>>>>>>>	return to third flag
	>>>>>>
	-			clear flag
	]			end

	>			move to next flag
	[			while true
	<<<<<<<<<< <<<<<<<<<<	move to proposed y position
	<-<-			decrement proposed y positions
	>>>>>>>>>> >>>>>>>>>>	return to final flag
	>>
	-			clear flag
	]			end
	
	<<<<<<<<<< <<<<<<<<<<	ret POS0
	<<<<<<<<<< <<<<<<<<<
	//player movement should now be fully parsed

	//return POS0

	########## ##########	########## ##########
	//sub check collisions
	//start POS0 return POS0

	//build proposed absolute
	>>>>>>>>>> >>		mov POS12
	[			sta loop
	>>>>>>>>		mov POS20
	+>+			inc POS20 POS21
	<<<<<<<<<		ret POS12
	-			dec POS12
	]			end loop
	>>>>>			mov POS17
	[			sta loop
	>>>			mov POS20
	++++++++++		inc POS20 10
	>			mov POS21
	++++++++++		inc POS21 10
	<<<<			ret POS17
	-			dec POS17
	]			end loop
	<<<<<<<<<< <<<<<<<	ret POS0

	########## ##########	########## ##########

	//sub check if valid movement against collision map
	>>>>>>>>>> >>>>>>>>>>	mov POS20
	[-			sta loop dec
	>>>>>>>>>> >>>>>>>>>>	mov POS90
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>>
	->->->->-> ->->->->->	dec POS90 thr POS99
	->->->->-> ->->->->->	dec POS100 thr POS109
	->->->->-> ->->->->->	dec POS110 thr POS119
	->->->->-> ->->->->->	dec POS120 thr POS129
	->->->->-> ->->->->->	dec POS130 thr POS139
	<<<<<<<<<< <<<<<<<<<<	mov POS20
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	]			end loop
	<<<<<<<<<< <<<<<<<<<<	mov POS0
	//return POS0

	########## ##########	########## ##########
	//sub set collision flags
	//there is definitely a better way to do this but I am so close to having this code written
	//that I am going to do it this way
	>>>>>>>>>> >>>>>>>>>>	mov POS90
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>>
	
	//seek through collision map and set flags
	[[-]>]			clear position and advance if position is not zero
	+			when the pointer finds a zero position it will halt and set it to 1
				this will either be in the middle of the collision map if the player is attempting
				to move into a wall or the flag will be set in position 140 which means it
				is a valid movement attempt
	>[[-]>]			seek through the rest of the map or halt at POS141
	+[-<+]-			the pointer is now lost so find it at POS89

	>>>>>>>>>> >		mov POS140
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	[			if flag is set move value of duplicate x and y pos into x and y pos
	<<<<<<<<<< <<<<<<<<<<	mov POS10
	<<<<<<<<<< <<<<<<<<<<	POS100

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<<		POS10
	[-]			clr POS10
	>>>>>[-]		clr POS15
	<<<<<
	>>>			mov POS13
	[-			sta loop dec
	<<<+			inc POS10
	>>>]			end loop
	>>>>>			mov POS18
	[			sta loop dec
	<<<+			inc POS15
	>>>-]			end loop
	>>			mov POS20
	>>>>>>>>>> >>>>>>>>>>	mov POS140
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	-]			clr flag end loop
	<<<<<<<<<< <<<<<<<<<<	mov POS0
	<<<<<<<<<< <<<<<<<<<<

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	//return POS0
//return POS0

process enemy tracking
//oh god oh lord
//I have been dreading this
//but it is what must be done
//start POS0 return POS0

	########## ########## 	########## ##########

	//sub duplicate x values
	//start POS0 return POS0
	//this code works 9/23/23
	>>>>>>>>>>		mov POS10
	[-			sta loop  dec
	>+>+>+>+		inc POS11 POS12 POS13 POS14
	<<<<			ret POS10
	]			eva loop
	>>>>			mov POS14
	[-			sta loop  dec
	<<<<+			inc POS10
	>>>>]			ret eval
	<<<<<<<<<< <<<<		ret POS0
	//return POS0

	########## ########## 	########## ##########

	sub duplicate y values
	//start POS0 return POS0
	//this code works 9/22/23
	>>>>>>>>>> >>>>>	mov POS15
	[-			sta loop  dec
	>+>+>+>+		inc POS11 POS12 POS13 POS14
	<<<<			ret POS10
	]			eva loop
	>>>>			mov POS14
	[-			sta loop  dec
	<<<<+			inc POS10
	>>>>]			ret eval
	<<<<<<<<<< <<<<<<<<<	ret POS0
	//return POS0

	########## ##########	########## ##########

	sub check if player and ai overlap
	>>>>>>>>>> >>>>>>>>>>	mov POS21
	>
	[-			sta loop dec
	>>>>>>>>>> >>>>>>>>>>	mov POS51
	>>>>>>>>>>
	-			dec POS51
	<<<<<<<<<< <<<<<<<<<<	mov POS21
	<<<<<<<<<<
	]			end loop

	//alright I need a way to flip a bit from zero to one essentially
	//so what I am thinking is we set a flag at POS52
	//and if POS51 is not zero it clears the flag
	//yeah that makes sense
	>>>>>>>>>> >>>>>>>>>>	mov POS52
	>>>>>>>>>> >
	+			set flag
	<			mov POS51
	[>-<[-]]		if POS51 is not zero clear flag
	>			mov POS51
	[			if POS52 is not zero
	>>>>>>>>>> >>>>>>>>>	mov POS470 (POS70)

	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>	POS170

	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>	POS270

	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>	POS370

	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>	POS470
	
	//write YOU DIE
	++++++++++		inc POS470 10
	[-			sta loop dec
	>+++++++++		inc POS471 9
	<]			ret eval loop
	>-.			set POS471 89 print
	----------		dec POS471 10
	.			print
	++++++			inc POS471 6
	.			print
	[-]			clr POS471
	<			mov POS470
	++++++++++		inc POS470 10
	[-			sta loop dec
	>+++			inc POS471 3
	<]			ret eval
	>++.			print space
	[-			sta loop dec
	>++<			ender 32 * 2 into POS 472
	]			end loop
	>++++			set POS472 to 68
	.
	+++++.
	----.

	<<<<<<<<<< <<<<<<<<<<	mov POS52
				POS452

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<	POS352

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<	POS252

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<	POS152

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<	POS52

	-]			clr flag end
	<<<<<<<<<< <<<<<<<<<<	mov POS0
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<
	//return POS0

	
	########## ##########	########## ##########
	
	sub move ai
	
	//compare the ai x position to the player x position
	//if the player x position is greater than the ai x position
	//increase the ai x position and vice versa
	//okay this is going to be hacky as hell but lets take a look at it
	>>>>>>>>>> >>>		mov POS13
	[-			if POS13 != 0 dec POS13
	>>>>>>>>>> >>>>>>>>>>	mov POS42 (aixposdup)
	>>>>>>>>>
	[-			if POS42 != 0 decrement POS42
	>>>>>>>			escape to POS49 (please be zero please be zero)
	]			end inner loop
	+[-<+]-			the pointer is lost so we must seek the promised land POS40
	<<<<<<<<<< <<<<<<<<<<	mov POS13
	<<<<<<<
	]			end outer loop
	>>>>>>>>>> >>>>>>>>>>	mov POS41
	>>>>>>>>
	+			inc POS40
	>			mov POS42
	[[-]			if POS41 != 0 clear POS41
	<-->]			mov POS40 dec 2 return and end loop
	<<<<<<<<<< <<<<<<<<<<	ret POS0
	<<<<<<<<<< <<<<<<<<<<
	<<
	//howdy future me when you're staring at this code slack jawed wondering what the hell just happened
	//here's the scoop
	//we took the player's x position and decreased it and the ai's x position until the player's x position
	//reaches zero
	//the ai's x position is set up so that it will not decrease past zero
	//afterwards we come back and if the value in the ai's xposition reservation is not zero then we will decrease
	//the enemy's x position otherwise increase it
	//does that make sense?
	//golly I sure am glad that makes perfect sense
	//now let's do the same thing with the y positions
	>>>>>>>>>> >>>>>>>>	mov POS18
	[-			if POS18 != 0 dec POS18
	>>>>>>>>>> >>>>>>>>>>	mov POS46
	>>>>>>>>
	[-			if POS46 != 0 decrement POS46
	>>>]			escqape to POS49 (oh god is it still zero?)
	+[-<+]-			seek to POS40
	<<<<<<<<<< <<<<<<<<<<	mov POS18
	<<
	]			end outer loop
	>>>>>>>>>> >>>>>>>>>>	mov POS45
	>>>>>>>		
	+			inc POS45
	>			mov POS46
	[[-]			if POS46 != 0 clear POS46
	<-->]			mov POS45 dec 2 return and end loop
	<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<	ret POS0
	
clean up
//reset memory for the next iteration
//start POS0 return POS0
	>>>>>>>>>> >		mov POS11
	[-]			clr
	>[-]			clr POS12
	>[-]			clr POS13
	>>>			mov POS16
	[-]			clr
	>[-]			clr POS17
	>[-]			clr POS18
	>>			mov POS20
	[-]			clr
	>[-]			clr POS21
	>[-]			clr POS22
	>[-]			clr POS23
	>[-]			clr POS24
	>[-]			clr POS25
	>>>>>>>			mov POS32
	[-]			clr
	>[-]			clr POS33
	>[-]			clr POS34
	>[-]			clr POS35


	>>>>>>>>>> >>>>>	mov POS50
	
	>>>>>>>>>> >>>>>>>>>>	mov POS250
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>	POS150

	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>	POS250

	+[-			seek through and clear the map until hitting a carriage return
	[-]<
	+]-			should be at POS149

	>			mov POS150

	<<<<<<<<<< <<<<<<<<<<	mov POS0
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<	POS50

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<<		POS0

	//clear collision map
	//I should have done this earlier but I forgot the order of operations
	//it's fine I am just needlessly wobbling the pointer back and forth
	>>>>>>>>>> >>>>>>>>>>	mov POS140
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>	POS100

	>>>>>>>>>> >>>>>>>>>>
	>>>>>>>>>> >>>>>>>>>>
	
	+[-[-]<+]-		seek n clear
	<<<<<<<<<

	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	<<<<<<<<<< <<<<<<<<<<
	//return POS0

end game loop
//start POS0 return POS0
//this code works
	>			mov POS1
				dec POS1 (delete for release)
	]			end loop
	<			ret POS0
//return POS0